import asyncio
import os
import logging
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher, types
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from dotenv import load_dotenv
from pytz import timezone

logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(message)s",
    handlers=[logging.StreamHandler()]
)
logger = logging.getLogger(__name__)

MOSCOW_TZ = timezone('Europe/Moscow')

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
TOKEN = os.getenv('TELEGRAM_TOKEN')
QUEUE_CHAT_ID = os.getenv('QUEUE_CHAT_ID')
CHECK_CHAT_ID = os.getenv('CHECK_CHAT_ID')
import asyncio
import os
import logging
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher, types
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from dotenv import load_dotenv
from pytz import timezone

logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(message)s",
    handlers=[logging.StreamHandler()]
)
logger = logging.getLogger(__name__)

MOSCOW_TZ = timezone('Europe/Moscow')

load_dotenv()
TOKEN = os.getenv('TELEGRAM_TOKEN')
QUEUE_CHAT_ID = os.getenv('QUEUE_CHAT_ID')
CHECK_CHAT_ID = os.getenv('CHECK_CHAT_ID')
QUEUE_THREAD_ID = os.getenv('QUEUE_THREAD_ID')
CHECK_THREAD_ID = os.getenv('CHECK_THREAD_ID')
NOTIFY_MINUTES_BEFORE = int(os.getenv('NOTIFY_MINUTES_BEFORE', 30))

if not TOKEN or not QUEUE_CHAT_ID or not CHECK_CHAT_ID:
    logger.error("–ù–µ –∑–∞–¥–∞–Ω—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
    exit(1)

bot = Bot(token=TOKEN)
dp = Dispatcher()
scheduler = AsyncIOScheduler(timezone=MOSCOW_TZ)

DAY_MAP = {
    '–ø–Ω': 'mon',
    '–≤—Ç': 'tue',
    '—Å—Ä': 'wed',
    '—á—Ç': 'thu',
    '–ø—Ç': 'fri',
    '—Å–±': 'sat',
    '–≤—Å': 'sun'
}


async def send_queue_message(subject: str):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –Ω–∞—á–∞–ª–µ –æ—á–µ—Ä–µ–¥–∏"""
    try:
        await bot.send_message(
            chat_id=QUEUE_CHAT_ID,
            message_thread_id=int(QUEUE_THREAD_ID) if QUEUE_THREAD_ID else None,
            text=f'üîî –û—Ç–∫—Ä—ã—Ç–∞ –æ—á–µ—Ä–µ–¥—å –Ω–∞ {subject}'
        )
        logger.info(f'–û—á–µ—Ä–µ–¥—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞: {subject}')
    except Exception as e:
        logger.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—á–µ—Ä–µ–¥–∏: {e}')


async def send_poll_message(subject: str):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –æ–ø—Ä–æ—Å–∞ –æ –ø–æ—Å–µ—â–µ–Ω–∏–∏"""
    try:
        await bot.send_poll(
            chat_id=CHECK_CHAT_ID,
            message_thread_id=int(CHECK_THREAD_ID) if CHECK_THREAD_ID else None,
            question=f'–õ–µ–∫—Ü–∏—è: {subject}',
            options=['–ù–∞ –º–µ—Å—Ç–µ', '–ù–∞ –º–µ—Å—Ç–µ'],
            is_anonymous=False,
            allows_multiple_answers=False
        )
        logger.info(f'–û–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: {subject}')
    except Exception as e:
        logger.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ–ø—Ä–æ—Å–∞: {e}')


def add_jobs_from_file(file_name: str, func, func_type: str, chat_id: str, minutes_before: int, odd: bool):
    """
    –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–¥–∞—á –∏–∑ —Ñ–∞–π–ª–∞.
    odd=True  -> –∑–∞–¥–∞—á–∏ —Å—Ç–∞–≤—è—Ç—Å—è –Ω–∞ –ß–Å–¢–ù–´–ï –Ω–µ–¥–µ–ª–∏ (2-52/2)
    odd=False -> –∑–∞–¥–∞—á–∏ —Å—Ç–∞–≤—è—Ç—Å—è –Ω–∞ –ù–ï–ß–Å–¢–ù–´–ï –Ω–µ–¥–µ–ª–∏ (1-53/2)
    """
    if odd:
        week_expr = "2-52/2"
        week_label = "—á–µ—Ç–Ω–∞—è"
    else:
        week_expr = "1-53/2"
        week_label = "–Ω–µ—á–µ—Ç–Ω–∞—è"

    try:
        with open(file_name, 'r', encoding='utf-8') as f:
            for line_number, line in enumerate(f, 1):
                line = line.strip()
                if not line or line.startswith('#'):
                    continue

                parts = line.split(',')
                if len(parts) != 3:
                    logger.error(f"{file_name} —Å—Ç—Ä–æ–∫–∞ {line_number}: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç (–¥–µ–Ω—å,–≤—Ä–µ–º—è,–ø—Ä–µ–¥–º–µ—Ç)")
                    continue

                day_str, time_str, subject = map(str.strip, parts)
                day_str = day_str.lower()

                if day_str not in DAY_MAP:
                    logger.error(f"{file_name} —Å—Ç—Ä–æ–∫–∞ {line_number}: –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –¥–µ–Ω—å '{day_str}'")
                    continue

                try:
                    hour, minute = map(int, time_str.split(':'))
                except Exception:
                    logger.error(f"{file_name} —Å—Ç—Ä–æ–∫–∞ {line_number}: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—Ä–µ–º—è '{time_str}'")
                    continue

                # –≤—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                notify_hour = hour
                notify_minute = minute
                if minutes_before > 0:
                    dt = datetime(2000, 1, 1, hour, minute) - timedelta(minutes=minutes_before)
                    notify_hour, notify_minute = dt.hour, dt.minute

                scheduler.add_job(
                    func,
                    'cron',
                    week=week_expr,
                    day_of_week=DAY_MAP[day_str],
                    hour=notify_hour,
                    minute=notify_minute,
                    args=[subject + f" ({time_str})"]
                )

                logger.info(
                    f"–î–æ–±–∞–≤–ª–µ–Ω {func_type} ({week_label}): {subject} - {DAY_MAP[day_str]} "
                    f"–≤ {notify_hour:02d}:{notify_minute:02d} -> {chat_id}"
                )

    except FileNotFoundError:
        logger.warning(f"–§–∞–π–ª {file_name} –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º {func_type}")


def setup_scheduler():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–¥–∞—á –∏–∑ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤"""
    configs = [
        {
            'files': {
                'odd': 'queue_lessons_odd.txt',
                'even': 'queue_lessons_even.txt'
            },
            'function': send_queue_message,
            'type': '–æ—á–µ—Ä–µ–¥—å',
            'chat_id': QUEUE_CHAT_ID,
            'minutes_before': 30
        },
        {
            'files': {
                'odd': 'check_lessons_odd.txt',
                'even': 'check_lessons_even.txt'
            },
            'function': send_poll_message,
            'type': '–æ–ø—Ä–æ—Å',
            'chat_id': CHECK_CHAT_ID,
            'minutes_before': 0
        }
    ]

    for config in configs:
        add_jobs_from_file(
            config['files']['odd'],
            config['function'],
            config['type'],
            config['chat_id'],
            config['minutes_before'],
            odd=True
        )
        add_jobs_from_file(
            config['files']['even'],
            config['function'],
            config['type'],
            config['chat_id'],
            config['minutes_before'],
            odd=False
        )


async def on_startup():
    logger.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    setup_scheduler()
    scheduler.start()
    logger.info(f"–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω. –ó–∞–¥–∞—á: {len(scheduler.get_jobs())}")


async def main():
    dp.startup.register(on_startup)
    await dp.start_polling(bot)


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    except Exception as e:
        logger.exception(f"–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
QUEUE_THREAD_ID = os.getenv('QUEUE_THREAD_ID')
CHECK_THREAD_ID = os.getenv('CHECK_THREAD_ID')
NOTIFY_MINUTES_BEFORE = int(os.getenv('NOTIFY_MINUTES_BEFORE', 30))

if not TOKEN or not QUEUE_CHAT_ID or not CHECK_CHAT_ID:
    logger.error("–ù–µ –∑–∞–¥–∞–Ω—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
    exit(1)

bot = Bot(token=TOKEN)
dp = Dispatcher()
scheduler = AsyncIOScheduler(timezone=MOSCOW_TZ)

DAY_MAP = {
    '–ø–Ω': 'mon',
    '–≤—Ç': 'tue',
    '—Å—Ä': 'wed',
    '—á—Ç': 'thu',
    '–ø—Ç': 'fri',
    '—Å–±': 'sat',
    '–≤—Å': 'sun'
}


async def send_queue_message(subject: str):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –Ω–∞—á–∞–ª–µ –æ—á–µ—Ä–µ–¥–∏"""
    try:
        await bot.send_message(
            chat_id=QUEUE_CHAT_ID,
            message_thread_id=int(QUEUE_THREAD_ID) if QUEUE_THREAD_ID else None,
            text=f'üîî –û—Ç–∫—Ä—ã—Ç–∞ –æ—á–µ—Ä–µ–¥—å –Ω–∞ {subject}'
        )
        logger.info(f'–û—á–µ—Ä–µ–¥—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞: {subject}')
    except Exception as e:
        logger.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—á–µ—Ä–µ–¥–∏: {e}')


async def send_poll_message(subject: str):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –æ–ø—Ä–æ—Å–∞ –æ –ø–æ—Å–µ—â–µ–Ω–∏–∏"""
    try:
        await bot.send_poll(
            chat_id=CHECK_CHAT_ID,
            message_thread_id=int(CHECK_THREAD_ID) if CHECK_THREAD_ID else None,
            question=f'–õ–µ–∫—Ü–∏—è: {subject}',
            options=['–ù–∞ –º–µ—Å—Ç–µ', '–ù–∞ –º–µ—Å—Ç–µ'],
            is_anonymous=False,
            allows_multiple_answers=False
        )
        logger.info(f'–û–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: {subject}')
    except Exception as e:
        logger.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ–ø—Ä–æ—Å–∞: {e}')


def add_jobs_from_file(file_name: str, func, func_type: str, chat_id: str, minutes_before: int, odd: bool):
    """
    –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–¥–∞—á –∏–∑ —Ñ–∞–π–ª–∞.
    odd=True  -> –∑–∞–¥–∞—á–∏ —Å—Ç–∞–≤—è—Ç—Å—è –Ω–∞ –ß–Å–¢–ù–´–ï –Ω–µ–¥–µ–ª–∏ (2-52/2)
    odd=False -> –∑–∞–¥–∞—á–∏ —Å—Ç–∞–≤—è—Ç—Å—è –Ω–∞ –ù–ï–ß–Å–¢–ù–´–ï –Ω–µ–¥–µ–ª–∏ (1-53/2)
    """
    if odd:
        week_expr = "2-52/2"
        week_label = "—á–µ—Ç–Ω–∞—è"
    else:
        week_expr = "1-53/2"
        week_label = "–Ω–µ—á–µ—Ç–Ω–∞—è"

    try:
        with open(file_name, 'r', encoding='utf-8') as f:
            for line_number, line in enumerate(f, 1):
                line = line.strip()
                if not line or line.startswith('#'):
                    continue

                parts = line.split(',')
                if len(parts) != 3:
                    logger.error(f"{file_name} —Å—Ç—Ä–æ–∫–∞ {line_number}: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç (–¥–µ–Ω—å,–≤—Ä–µ–º—è,–ø—Ä–µ–¥–º–µ—Ç)")
                    continue

                day_str, time_str, subject = map(str.strip, parts)
                day_str = day_str.lower()

                if day_str not in DAY_MAP:
                    logger.error(f"{file_name} —Å—Ç—Ä–æ–∫–∞ {line_number}: –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –¥–µ–Ω—å '{day_str}'")
                    continue

                try:
                    hour, minute = map(int, time_str.split(':'))
                except Exception:
                    logger.error(f"{file_name} —Å—Ç—Ä–æ–∫–∞ {line_number}: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—Ä–µ–º—è '{time_str}'")
                    continue

                # –≤—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                notify_hour = hour
                notify_minute = minute
                if minutes_before > 0:
                    dt = datetime(2000, 1, 1, hour, minute) - timedelta(minutes=minutes_before)
                    notify_hour, notify_minute = dt.hour, dt.minute

                scheduler.add_job(
                    func,
                    'cron',
                    week=week_expr,
                    day_of_week=DAY_MAP[day_str],
                    hour=notify_hour,
                    minute=notify_minute,
                    args=[subject + f" ({time_str})"]
                )

                logger.info(
                    f"–î–æ–±–∞–≤–ª–µ–Ω {func_type} ({week_label}): {subject} - {DAY_MAP[day_str]} "
                    f"–≤ {notify_hour:02d}:{notify_minute:02d} -> {chat_id}"
                )

    except FileNotFoundError:
        logger.warning(f"–§–∞–π–ª {file_name} –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º {func_type}")


def setup_scheduler():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–¥–∞—á –∏–∑ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤"""
    configs = [
        {
            'files': {
                'odd': 'queue_lessons_odd.txt',
                'even': 'queue_lessons_even.txt'
            },
            'function': send_queue_message,
            'type': '–æ—á–µ—Ä–µ–¥—å',
            'chat_id': QUEUE_CHAT_ID,
            'minutes_before': 30
        },
        {
            'files': {
                'odd': 'check_lessons_odd.txt',
                'even': 'check_lessons_even.txt'
            },
            'function': send_poll_message,
            'type': '–æ–ø—Ä–æ—Å',
            'chat_id': CHECK_CHAT_ID,
            'minutes_before': 0
        }
    ]

    for config in configs:
        add_jobs_from_file(
            config['files']['odd'],
            config['function'],
            config['type'],
            config['chat_id'],
            config['minutes_before'],
            odd=True
        )
        add_jobs_from_file(
            config['files']['even'],
            config['function'],
            config['type'],
            config['chat_id'],
            config['minutes_before'],
            odd=False
        )


async def on_startup():
    logger.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    setup_scheduler()
    scheduler.start()
    logger.info(f"–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω. –ó–∞–¥–∞—á: {len(scheduler.get_jobs())}")


async def main():
    dp.startup.register(on_startup)
    await dp.start_polling(bot)


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    except Exception as e:
        logger.exception(f"–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
