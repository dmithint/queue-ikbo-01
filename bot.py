import asyncio
import os
import logging
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from dotenv import load_dotenv
from pytz import timezone

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(message)s",
    handlers=[logging.StreamHandler()]
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
MOSCOW_TZ = timezone('Europe/Moscow')

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
TOKEN = os.getenv('TELEGRAM_TOKEN')
CHAT_ID = os.getenv('CHAT_ID')
NOTIFY_MINUTES_BEFORE = int(os.getenv('NOTIFY_MINUTES_BEFORE', 30))

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
if not TOKEN or not CHAT_ID:
    logger.error("–ù–µ –∑–∞–¥–∞–Ω—ã TOKEN –∏–ª–∏ CHAT_ID –≤ .env!")
    exit(1)

bot = Bot(token=TOKEN)
dp = Dispatcher()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
scheduler = AsyncIOScheduler(timezone=MOSCOW_TZ)

# –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ä—É—Å—Å–∫–∏—Ö –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏ cron-—Ñ–æ—Ä–º–∞—Ç—É
DAY_MAP = {
    '–ø–Ω': 'mon',
    '–≤—Ç': 'tue',
    '—Å—Ä': 'wed',
    '—á—Ç': 'thu',
    '–ø—Ç': 'fri',
    '—Å–±': 'sat',
    '–≤—Å': 'sun'
}

async def send_queue_message(subject: str):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —É–∫–∞–∑–∞–Ω–Ω—ã–π —á–∞—Ç"""
    try:
        await bot.send_message(
            chat_id=CHAT_ID,
            text=f'üîî –û—Ç–∫—Ä—ã—Ç–∞ –æ—á–µ—Ä–µ–¥—å –Ω–∞ {subject}'
        )
        logger.info(f'–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: "{subject}"')
    except Exception as e:
        logger.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}')

def setup_scheduler():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞"""
    try:
        with open('data.txt', 'r', encoding='utf-8') as f:
            for line_number, line in enumerate(f, 1):
                line = line.strip()
                if not line or line.startswith('#'):
                    continue

                logger.debug(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç—Ä–æ–∫–∏ {line_number}: {line}")

                parts = line.split(',')
                if len(parts) != 3:
                    logger.error(f"–°—Ç—Ä–æ–∫–∞ {line_number}: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –û–∂–∏–¥–∞–µ—Ç—Å—è: –¥–µ–Ω—å,–≤—Ä–µ–º—è,–ø—Ä–µ–¥–º–µ—Ç")
                    continue

                day_str, time_str, subject = map(str.strip, parts)
                day_str = day_str.lower()

                if day_str not in DAY_MAP:
                    logger.error(f"–°—Ç—Ä–æ–∫–∞ {line_number}: –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ '{day_str}'")
                    continue

                try:
                    hour, minute = map(int, time_str.split(':'))
                    if not (0 <= hour <= 23 and 0 <= minute <= 59):
                        raise ValueError
                except (ValueError, IndexError):
                    logger.error(f"–°—Ç—Ä–æ–∫–∞ {line_number}: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—Ä–µ–º—è '{time_str}'")
                    continue

                # –†–∞—Å—Å—á–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                target_time = datetime.now(MOSCOW_TZ).replace(
                    hour=hour,
                    minute=minute,
                    second=5,
                    microsecond=0
                )
                notify_time = target_time - timedelta(minutes=NOTIFY_MINUTES_BEFORE)

                scheduler.add_job(
                    send_queue_message,
                    'cron',
                    day_of_week=DAY_MAP[day_str],
                    hour=notify_time.hour,
                    minute=notify_time.minute,
                    args=[subject]
                )
                logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω–æ: {subject} - {DAY_MAP[day_str]} {notify_time.strftime('%H:%M')} MSK")

    except FileNotFoundError:
        logger.error("–§–∞–π–ª data.txt –Ω–µ –Ω–∞–π–¥–µ–Ω")
        exit(1)

async def on_startup():
    """–î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞"""
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")

    # –¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥
    scheduler.add_job(
        send_queue_message,
        'date',
        run_date=datetime.now(MOSCOW_TZ) + timedelta(seconds=10),
        args=["üöÄ –¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"]
    )

    setup_scheduler()
    scheduler.start()
    logger.info(f"–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω. –í—Å–µ–≥–æ –∑–∞–¥–∞—á: {len(scheduler.get_jobs())}")

async def main():
    dp.startup.register(on_startup)
    await dp.start_polling(bot)

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.exception(f"–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")